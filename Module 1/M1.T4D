/*
Ultrasonic Distance Sensor(HC-SR04) with a Neopixel 12 as an actuator
code implemented by Yufan Kang
Student ID: 218393897
*/

#include <Adafruit_NeoPixel.h>

//define ultrasonic distance sensor's pin numbers
#define TRIG_PIN 12
#define ECHO_PIN 13

//define neopixel 12's pin numbers
#define NEOPIXEL_PIN 11

//define neopixel 12's led amount
#define NEOPIXEL_NUM_LED 12

//define push button's pin number
#define BUTTON_PIN 2
#define BUTTON_PIN_MUL 3
#define BUTTON_PIN_3 7

//define led's pin number
#define LED_PIN 10
#define LED_2_PIN 9

//define gas sensor's analog pin number
#define GAS_ANA_PIN 0

//define the temperature sensor's analog pin number
#define TMP_SENSOR 1

// defines variables
const uint16_t t1_load = 0;
const uint16_t t1_comp = 31250;
long duration;
int distance = 0;
int trigVal;
int sensorValue;
int round_times = 0;

Adafruit_NeoPixel strip = Adafruit_NeoPixel(NEOPIXEL_NUM_LED, NEOPIXEL_PIN, NEO_GRB);


void setup() {
  //set up timer interrupt
  pinMode(LED_2_PIN, OUTPUT);
  TCCR1A = 0;
  
  TCCR1B |= (1 << CS12);
  TCCR1B &= ~(1 << CS11);
  TCCR1B &= ~(1 << CS10);
  
  TCNT1 = t1_load;
  OCR1A = t1_comp;
  
  TIMSK1 = (1 << OCIE1A);
  //set up other things
  pinMode(TRIG_PIN, OUTPUT); // Sets the trigPin as an Output
  pinMode(ECHO_PIN, INPUT); // Sets the echoPin as an Input
  pinMode(LED_PIN, OUTPUT);
  attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), pin_ISR, FALLING);
  attachInterrupt(digitalPinToInterrupt(BUTTON_PIN_MUL), pin_ISR_mul, FALLING);
  pciSetup(BUTTON_PIN_3);
  Serial.begin(9600); // Starts the serial communication
  strip.begin();
  sei(); //enable global interrupts
}
void loop() {
  //digitalWrite(LED_2_PIN, HIGH);
  
}

static void chase(uint32_t c) {
  for(uint8_t i=0; i<strip.numPixels()+4; i++) {
      strip.setPixelColor(i  , c); // turn on the ith led 
      strip.setPixelColor(i-4, 0); // Erase pixel a few steps back
      strip.show();
      delay(10);
  }
}


void pin_ISR(){   
  // Clears the TRIG_PIN
  trigVal = digitalRead(TRIG_PIN);
  digitalWrite(TRIG_PIN, trigVal);
  delayMicroseconds(2);
  // Sets the TRIG_PIN on HIGH state for 10 micro seconds
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  // Reads the ECHO_PIN, returns the sound wave travel time in microseconds
  duration = pulseIn(ECHO_PIN, HIGH);
  // Calculate the distance
  distance= duration*0.034/2;
  // Prints the distance on the Serial port
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println("cm");
  //trigger the actutator(neopixel 12) to show the output
  if( (distance <= 100) &&  (distance > 0)){
    //if the object locates in less than 100cm, the neopixel led shows in red
    chase(strip.Color(255,0,0));
  }
  else if((distance <= 200) && (distance > 100)){
    //if the object locates in less than 200cm but further than 100cm, the neopixel led shows in green
    chase(strip.Color(0,255,0));
  }
  else if (distance == 0){
    chase(strip.Color(51,153,204));
  }
  else{
    //if the object locates further than 300cm, the neopixel led shows in yellow
    chase(strip.Color(0,0,255));
  }
}
 
void pin_ISR_mul(){
  sensorValue = analogRead(GAS_ANA_PIN);       // read analog input pin 0
  Serial.print("Gas Value is: ");
  Serial.println(sensorValue, DEC);  // prints the value read
  if (sensorValue < 500){
    digitalWrite(LED_PIN, HIGH);   // turn the LED on (HIGH is the voltage level)
  }
  else if ((sensorValue >= 500) && (sensorValue < 700)){
    digitalWrite(LED_PIN, LOW);
    for (uint8_t j = 0; j<20; j++){
    	digitalWrite(LED_PIN, HIGH);
    	delay(100);
    	digitalWrite(LED_PIN, LOW);
    	delay(100);
    }
  }
  else{
    digitalWrite(LED_PIN, LOW);
    for (uint8_t j = 0; j<20; j++){
    	digitalWrite(LED_PIN, HIGH);
    	delay(10);
    	digitalWrite(LED_PIN, LOW);
    	delay(10);
    }
  }
}

void pciSetup(byte pin)
{
    *digitalPinToPCMSK(pin) |= bit (digitalPinToPCMSKbit(pin));  // enable pin
    PCIFR  |= bit (digitalPinToPCICRbit(pin)); // clear any outstanding interrupt
    PCICR  |= bit (digitalPinToPCICRbit(pin)); // enable interrupt for the group
}

ISR (PCINT2_vect) // handle pin change interrupt for D0 to D7 here
 {
   if (round_times % 2 == 1){
     int reading = analogRead(TMP_SENSOR);  

     // converting that reading to voltage, for 3.3v arduino use 3.3
     float voltage = reading * 5.0;
     voltage /= 1024.0; 
     // now print out the temperature
     float temperatureC = (voltage - 0.5) * 100 ;  //converting from 10 mv per degree wit 500 mV offset
     //to degrees ((voltage - 500mV) times 100)
     Serial.print("Temperature is: ");
     Serial.print(temperatureC); 
     Serial.println(" degrees");

     delay(10);  
   }
  round_times = round_times + 1;
 } 

ISR(TIMER1_COMPA_vect){
  TCNT1 = t1_load;
  PORTB ^= (1 << PB1); // PB1 is the registor for digital pin 9
}


